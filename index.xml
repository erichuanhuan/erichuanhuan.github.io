<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>心态平和 慢步缓行</title>
    <link>https://erichuanhuan.github.io/</link>
    <description>Recent content on 心态平和 慢步缓行</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 01 Jan 2021 15:53:44 +0800</lastBuildDate>
    
        <atom:link href="https://erichuanhuan.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>一起来投篮吧</title>
      <link>https://erichuanhuan.github.io/post/20201227%E8%BF%90%E5%8A%A8/</link>
      <pubDate>Fri, 01 Jan 2021 15:53:44 +0800</pubDate>
      
      <guid>https://erichuanhuan.github.io/post/20201227%E8%BF%90%E5%8A%A8/</guid>
      <description>一起来投篮吧 </description>
    </item>
    
    <item>
      <title>树莓派AIS/ADS-B合二为一 </title>
      <link>https://erichuanhuan.github.io/post/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%90%88%E4%BA%8C%E4%B8%BA%E4%B8%80%E8%AE%BE%E7%BD%AE/</link>
      <pubDate>Fri, 01 Jan 2021 14:53:44 +0800</pubDate>
      
      <guid>https://erichuanhuan.github.io/post/%E6%A0%91%E8%8E%93%E6%B4%BE%E5%90%88%E4%BA%8C%E4%B8%BA%E4%B8%80%E8%AE%BE%E7%BD%AE/</guid>
      <description>树莓派AIS/ADS-B合二为一  12/31/2019 6:11:23 PM
参考 https://pypi.org/project/pyrtlsdr/#description
1. 电视棒序列号设置 使用 rtl_eeprom -s 00000101，注意：序列号尽量不要设置为 00000001或00000002，可能会跟索引冲突，可以设置为00000101、00000102、00000103等。
选择 &amp;ldquo;y&amp;rdquo;，显示修改成功。
安装完成后，可以使用rtl_test进行查看。
2. 软件安装部署 1）安装pyrtlsdr 使用pip install pyrtlsdr命令安装
安装完成之后，可使用下面命令进行测试：
from rtlsdr import RtlSdr sdr = RtlSdr() # configure device sdr.sample_rate = 2.048e6 # Hz sdr.center_freq = 70e6 # Hz sdr.freq_correction = 60 # PPM sdr.gain = &#39;auto&#39; print(sdr.read_samples(512)) 2）新建 search_device_index.py文件 from rtlsdr import RtlSdr# Get a list of detected device serial numbers (str)# serial_numbers = RtlSdr.</description>
    </item>
    
    <item>
      <title>Polar5S接收机数据处理</title>
      <link>https://erichuanhuan.github.io/post/polar5s%E6%8E%A5%E6%94%B6%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</link>
      <pubDate>Thu, 16 Jan 2020 21:00:00 +0800</pubDate>
      
      <guid>https://erichuanhuan.github.io/post/polar5s%E6%8E%A5%E6%94%B6%E6%9C%BA%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</guid>
      <description>Polar5S接收机数据处理 同事新购置了一台Polar5S接收机，对照说明书艰难进行了配置，发现各方面还是很麻烦。现在将配置的一些过程整理一下。
接收机初始化配置 这个基本上按照说明书直接配置就可以了，我使用的是有线网络进行的配置，设备也支持无线wifi、串口等好几种方式进行设置。需要说明的是web页面仅提供接收机设置，其在接收机本身存储的rinex格式数据，不知道什么原因会存在丢数据的情况。
自带工具进行数据采集 接收机随机自带了 rxtools_19_0_1_installer.exe 这个工具。该工具实在强悍，提供了接收机设置、数据采集、数据转换、定位分析等多种功能。我们的需求是需要获取接收机的TEC和S4，该数据存放在 “SEPT012A.21_.ismr” 这样的一个文件中。接收机提供的原始数据厂家没有提供数据格式说明，我们采样率比较高，因此原始数据（文件名：SEPT012A.21_）很大，将近1.5G，为了后期进行算法比对，因此使用 rxtools_ 提供的 sbf2rin 该工具进行Rinex格式数据的转换，关于转换在 rxtools_ 提供的pdf文件中有具体的说明。Rinex2.X的版本没有北斗数据，需要注意。因此我转换成了3.X的版本，该工具目前支持最高3.04的版本。
数据转换代码 使用了C#进行编写。
基本功能： 1）每天定时处理前一天的数据，包括 转换为rinex格式的观测数据和星历数据（星历转换目前的方法比较笨，转换了三个文件。） 2）转换后的数据上传ftp 3）判断有无闪烁（非常基本的方法），如果无，删除原始观测数据（太大了，没法保存啊）
ftp使用了第三方FtpWeb的类。稳定性和可靠性有待观察。
namespace Polar5S数据处理软件{/** 定时运行，计算前一天的年积日，获取该文件夹下的所有文件* * 使用命令进行数据转换 30秒的rinex观测数据 以及 星历数据* * * * 调用wget进行数据回传* * * */public partial class Form1 : Form{private static string CmdPath = @&amp;quot;C:\Windows\System32\cmd.exe&amp;quot;;string INIfile = Application.StartupPath + &amp;quot;\\INI\\SYS.INI&amp;quot;;private System.Timers.Timer timer_monitor;private object locktimerdela = new object();private object locktimerismr = new object();public delegate void MyInvoke(string str);string ftp_ip = &amp;quot;&amp;quot;, ftp_user = &amp;quot;&amp;quot;, ftp_pass = &amp;quot;&amp;quot;;string filepath = &amp;quot;&amp;quot;;private System.</description>
    </item>
    
    <item>
      <title>欢欢的作文--家</title>
      <link>https://erichuanhuan.github.io/post/20200116%E4%BD%9C%E6%96%87%E5%AE%B6/</link>
      <pubDate>Thu, 16 Jan 2020 20:00:00 +0800</pubDate>
      
      <guid>https://erichuanhuan.github.io/post/20200116%E4%BD%9C%E6%96%87%E5%AE%B6/</guid>
      <description>家 欢欢本周数学测试两个100+10，表现真的很棒！！语文仍然进步之中。。偶尔看到孩子刚刚写的作文，竟然引起了很多共鸣，感觉很用心。同时也是很惭愧，这半年陪伴的时间确实少了很多，近日孩子见了我总会说一句 “你今天心情好吗？” 我是该好好整理一下情绪了。。</description>
    </item>
    
    <item>
      <title>爬虫下载电离图数据</title>
      <link>https://erichuanhuan.github.io/post/20200116/</link>
      <pubDate>Thu, 16 Jan 2020 20:00:00 +0800</pubDate>
      
      <guid>https://erichuanhuan.github.io/post/20200116/</guid>
      <description>Python网络爬虫获取电离图图片 应邀初次尝试使用python爬取指定网站的电离图图片，网上一通搜索，基本明白了。现在整理如下：
需求 从https://lgdc.uml.edu/common/DIDBDayStationStatistic?ursiCode=YA462&amp;amp;year=2017&amp;amp;month=1&amp;amp;day=13这个网站获取指定年度的电离图图片，后期会采用图形识别的方式获取数据。
查找链接 源码查看可知，基本链接为 https://lgdc.uml.edu/common/DIDBDayStationStatistic?ursiCode=YA462&amp;amp;year=2017&amp;amp;month=1&amp;amp;day=1，该页面中的图片的链接为https://lgdc.uml.edu:443/common/ShowIonogram?mid=24349596，也就是说只要获取到mid “24349596”这个值就可以进行页面响应了。
基本代码 import requestsimport refrom bs4 import BeautifulSoupfrom urllib import requesthd={&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/78.0.3904.108 Safari/537.36&#39;}# 输入主网页# murl = &amp;quot;https://lgdc.uml.edu/common/DIDBDayStationStatistic?ursiCode=YA462&amp;amp;year=2017&amp;amp;month=1&amp;amp;day=1&amp;quot;for day in range(10,15):# 要请求的网络地址url = &#39;https://lgdc.uml.edu/common/DIDBDayStationStatistic?ursiCode=YA462&amp;amp;year=2014&amp;amp;month=1&amp;amp;day=&#39;+str(day)# 请求网络地址得到html网页代码html = request.urlopen(url)# 整理代码soup = BeautifulSoup(html, &#39;html.parser&#39;)# 找出所有的 a 标签， 因为所有的链接都在 a 标签内data = soup.find_all(&#39;a&#39;)# 遍历所有的 a 标签， 获取它们的 href 属性的值和它们的 textfor item in data:if item.</description>
    </item>
    
    <item>
      <title>one</title>
      <link>https://erichuanhuan.github.io/post/one/</link>
      <pubDate>Thu, 02 Jan 2020 09:53:44 +0800</pubDate>
      
      <guid>https://erichuanhuan.github.io/post/one/</guid>
      <description>操作云端MySql数据库 新建表：
注意 报1046错时，鼠标双击左边数据库
CREATE TABLE ais_message_5_realtime SELECT * FROM ais_message_5 WHERE 1=2 </description>
    </item>
    
  </channel>
</rss>
